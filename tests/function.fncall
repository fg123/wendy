WendyScript Pre-Processor Dump: Function Calls

       1: let f => { 
       5:   In Function; 
       7: }; 
       9: call f; 
      12: let ~tmp1; 
      15: pop ~tmp1; 
      18: ~tmp1; 
      20: let add1 => { 
      24:   let x; 
      27:   pop x; 
      30:   ret x + 1; 
      35: }; 
      37: push 10; 
      40: call add1; 
      43: let ~tmp2; 
      46: pop ~tmp2; 
      49: ~tmp2; 
      51: set add1 = 10; 
      56: add1; 
      58: set add1 => { 
      62:   let x; 
      65:   pop x; 
      68:   ret x + x; 
      73: }; 
      75: push 10; 
      78: call add1; 
      81: let ~tmp3; 
      84: pop ~tmp3; 
      87: ~tmp3; 
      89: let nat_range => { 
      93:   let step; 
      96:   pop step; 
      99:   let end; 
     102:   pop end; 
     105:   let start; 
     108:   pop start; 
     111:   push start >= end; 
     116:   cond { 
     118:     ret ; 
     121:   } 
     122:   { 
     123:     push start + step; 
     128:     push end; 
     131:     push step; 
     134:     call nat_range; 
     137:     let ~tmp4; 
     140:     pop ~tmp4; 
     143:     ret start +   + ~tmp4; 
     150:   }; 
     152: }; 
     154: push 5; 
     157: push 10; 
     160: push 2; 
     163: call nat_range; 
     166: let ~tmp5; 
     169: pop ~tmp5; 
     172: ~tmp5; 
     174: push 10; 
     177: call add1; 
     180: let ~tmp6; 
     183: pop ~tmp6; 
     186: push ~tmp6; 
     189: call add1; 
     192: let ~tmp7; 
     195: pop ~tmp7; 
     198: ~tmp7;
// llist.w: WendyScript 1.0
// Linked-list implementation in WendyScript,
// Based on Racket-style lists
// By: Felix Guo
// Provides: cons, first, rest, length, build_list, print_list


// Each cons contains a value and a pointer to the next node.
// none is used to refer to a pointer to the none object

struct cons => (value, next);

// Getting Components
let first => (list) {
	ret cons_value(list);
};
let rest => (list) {
	ret cons_next(list);
};

// Length of List
let length => (list) {
	let size = 0;
	loop (list != none) {
		inc size;
		set list = rest(list);
	};
	ret size;
};

// Builds a list from 1 to len
let build_list => (len) {
	let res = none;
	loop (len > 0) {
		set res = cons(len, res);
		dec len;
	};
	ret res;
};

// Prints the List
let print_list => (list) {
	@"List: ";
	loop (list != none) {
		@first(list) + " ";
		set list = rest(list);
	};
	ret "";
};

let mylist = build_list(10);
print_list(mylist);

let insert => (element, lst) {
	if (lst == none) {
		ret cons(element, none);
	}
	else if (element <= first(lst)) {
		ret cons(element, lst);
	}
	else {
		ret cons(first(lst), insert(element, rest(lst)));
	};
};

// lst is a linked list
let sort => (lst) {
	if (lst == none) {
		ret none;
	}
	else {
		ret insert(first(lst), sort(rest(lst)));
	};
};



let sortinglist = cons(84, cons(2, cons(9, cons(36, cons(17, none)))));
set sortinglist = sort(sortinglist);
print_list(sortinglist);
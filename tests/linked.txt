WendyScript Pre-Processor Dump
let cons => { 
       4(    2):  let next ; 
       7(    5):  pop next ; 
      10(    8):  let value ; 
      13(   11):  pop value ; 
      16(   14):  let newobj [ 2 ] ; 
      22(   20):  set newobj [ 0 ] = value ; 
      30(   28):  set newobj [ 1 ] = next ; 
      38(   36):  ret & newobj ; 
      42(   40):  } ; 
      44(   42):let cons_value => { 
      48(   46):  let objptr ; 
      51(   49):  pop objptr ; 
      54(   52):  ret * ( objptr + 0 ) ; 
      62(   60):  } ; 
      64(   62):let cons_next => { 
      68(   66):  let objptr ; 
      71(   69):  pop objptr ; 
      74(   72):  ret * ( objptr + 1 ) ; 
      82(   80):  } ; 
      84(   82):let first => { 
      88(   86):  let list ; 
      91(   89):  pop list ; 
      94(   92):  if ( list != <none> ) { 
     101(   16):    push list ; 
     104(  102):    call cons_value ; 
     107(  105):    let ~tmp1 ; 
     110(  108):    pop ~tmp1 ; 
     113(  111):    ret ~tmp1 ; 
     116(  114):    } ; 
     118(  116):  } ; 
     120(  118):let rest => { 
     124(  113):  let list ; 
     127(  125):  pop list ; 
     130(  128):  if ( list != <none> ) { 
     137(   21):    push list ; 
     140(  138):    call cons_next ; 
     143(  141):    let ~tmp2 ; 
     146(  144):    pop ~tmp2 ; 
     149(  147):    ret ~tmp2 ; 
     152(  150):    } ; 
     154(  152):  } ; 
     156(  154):let is_empty => { 
     160(  140):  let list ; 
     163(  161):  pop list ; 
     166(  164):  ret list == <none> ; 
     171(  169):  } ; 
     173(  171):let length => { 
     177(  157):  let list ; 
     180(  178):  pop list ; 
     183(  181):  let size = 0 ; 
     188(  186):  loop ( list != <none> ) { 
     195(   32):    inc size ; 
     198(  196):    push list ; 
     201(  199):    call rest ; 
     204(  202):    let ~tmp3 ; 
     207(  205):    pop ~tmp3 ; 
     210(  208):    set list = ~tmp3 ; 
     215(  213):    } ; 
     217(  215):  ret size ; 
     220(  218):  } ; 
     222(  220):let build_list => { 
     226(  197):  let len ; 
     229(  227):  pop len ; 
     232(  230):  let res = <none> ; 
     237(  235):  loop ( len > 0 ) { 
     244(   42):    push len ; 
     247(  245):    push res ; 
     250(  248):    call cons ; 
     253(  251):    let ~tmp4 ; 
     256(  254):    pop ~tmp4 ; 
     259(  257):    set res = ~tmp4 ; 
     264(  262):    dec len ; 
     267(  265):    } ; 
     269(  267):  ret res ; 
     272(  270):  } ; 
     274(  272):let print_list => { 
     278(  239):  let list ; 
     281(  279):  pop list ; 
     284(  282):  @ List:  ; 
     287(  285):  loop ( list != <none> ) { 
     294(   52):    push list ; 
     297(  295):    call first ; 
     300(  298):    let ~tmp5 ; 
     303(  301):    pop ~tmp5 ; 
     306(  304):    @ ~tmp5 +   ; 
     311(  309):    push list ; 
     314(  312):    call rest ; 
     317(  315):    let ~tmp6 ; 
     320(  318):    pop ~tmp6 ; 
     323(  321):    set list = ~tmp6 ; 
     328(  326):    } ; 
     330(  328):   ; 
     332(  330):  ret ; 
     334(  332):  } ; 
     336(  334):let foldr => { 
     340(  283):  let initial ; 
     343(  341):  pop initial ; 
     346(  344):  let list ; 
     349(  347):  pop list ; 
     352(  350):  let fn ; 
     355(  353):  pop fn ; 
     358(  356):  push list ; 
     361(  359):  call is_empty ; 
     364(  362):  let ~tmp7 ; 
     367(  365):  pop ~tmp7 ; 
     370(  368):  if ( ~tmp7 ) { 
     375(   61):    ret initial ; 
     378(  376):    } else { 
     381(   64):    push list ; 
     384(  382):    call first ; 
     387(  385):    let ~tmp8 ; 
     390(  388):    pop ~tmp8 ; 
     393(  391):    push list ; 
     396(  394):    call rest ; 
     399(  397):    let ~tmp9 ; 
     402(  400):    pop ~tmp9 ; 
     405(  403):    push fn ; 
     408(  406):    push ~tmp9 ; 
     411(  409):    push initial ; 
     414(  412):    call foldr ; 
     417(  415):    let ~tmp10 ; 
     420(  418):    pop ~tmp10 ; 
     423(  421):    push ~tmp8 ; 
     426(  424):    push ~tmp10 ; 
     429(  427):    call fn ; 
     432(  430):    let ~tmp11 ; 
     435(  433):    pop ~tmp11 ; 
     438(  436):    ret ~tmp11 ; 
     441(  439):    } ; 
     443(  441):  } ; 
     445(  443):let foldl => { 
     449(  344):  let initial ; 
     452(  450):  pop initial ; 
     455(  453):  let list ; 
     458(  456):  pop list ; 
     461(  459):  let fn ; 
     464(  462):  pop fn ; 
     467(  465):  let result = initial ; 
     472(  470):  push list ; 
     475(  473):  call is_empty ; 
     478(  476):  let ~tmp12 ; 
     481(  479):  pop ~tmp12 ; 
     484(  482):  loop ( ! ~tmp12 ) { 
     490(   71):    push list ; 
     493(  491):    call first ; 
     496(  494):    let ~tmp13 ; 
     499(  497):    pop ~tmp13 ; 
     502(  500):    push ~tmp13 ; 
     505(  503):    push result ; 
     508(  506):    call fn ; 
     511(  509):    let ~tmp14 ; 
     514(  512):    pop ~tmp14 ; 
     517(  515):    set result = ~tmp14 ; 
     522(  520):    push list ; 
     525(  523):    call rest ; 
     528(  526):    let ~tmp15 ; 
     531(  529):    pop ~tmp15 ; 
     534(  532):    set list = ~tmp15 ; 
     539(  537):    } ; 
     541(  539):  ret result ; 
     544(  542):  } ; 
     546(  544):let map => { 
     550(  408):  let list ; 
     553(  551):  pop list ; 
     556(  554):  let fn ; 
     559(  557):  pop fn ; 
     562(  560):  push list ; 
     565(  563):  call is_empty ; 
     568(  566):  let ~tmp16 ; 
     571(  569):  pop ~tmp16 ; 
     574(  572):  if ( ~tmp16 ) { 
     579(   79):    ret <none> ; 
     582(  580):    } else { 
     585(   82):    push list ; 
     588(  586):    call first ; 
     591(  589):    let ~tmp17 ; 
     594(  592):    pop ~tmp17 ; 
     597(  595):    push ~tmp17 ; 
     600(  598):    call fn ; 
     603(  601):    let ~tmp18 ; 
     606(  604):    pop ~tmp18 ; 
     609(  607):    push list ; 
     612(  610):    call rest ; 
     615(  613):    let ~tmp19 ; 
     618(  616):    pop ~tmp19 ; 
     621(  619):    push fn ; 
     624(  622):    push ~tmp19 ; 
     627(  625):    call map ; 
     630(  628):    let ~tmp20 ; 
     633(  631):    pop ~tmp20 ; 
     636(  634):    push ~tmp18 ; 
     639(  637):    push ~tmp20 ; 
     642(  640):    call cons ; 
     645(  643):    let ~tmp21 ; 
     648(  646):    pop ~tmp21 ; 
     651(  649):    ret ~tmp21 ; 
     654(  652):    } ; 
     656(  654):  } ; 
     658(  656):let filter => { 
     662(  464):  let list ; 
     665(  663):  pop list ; 
     668(  666):  let fn ; 
     671(  669):  pop fn ; 
     674(  672):  push list ; 
     677(  675):  call is_empty ; 
     680(  678):  let ~tmp22 ; 
     683(  681):  pop ~tmp22 ; 
     686(  684):  push list ; 
     689(  687):  call first ; 
     692(  690):  let ~tmp23 ; 
     695(  693):  pop ~tmp23 ; 
     698(  696):  push ~tmp23 ; 
     701(  699):  call fn ; 
     704(  702):  let ~tmp24 ; 
     707(  705):  pop ~tmp24 ; 
     710(  708):  if ( ~tmp22 ) { 
     715(   88):    ret <none> ; 
     718(  716):    } else if ( ~tmp24 ) { 
     724(   91):    push list ; 
     727(  725):    call first ; 
     730(  728):    let ~tmp25 ; 
     733(  731):    pop ~tmp25 ; 
     736(  734):    push list ; 
     739(  737):    call rest ; 
     742(  740):    let ~tmp26 ; 
     745(  743):    pop ~tmp26 ; 
     748(  746):    push fn ; 
     751(  749):    push ~tmp26 ; 
     754(  752):    call filter ; 
     757(  755):    let ~tmp27 ; 
     760(  758):    pop ~tmp27 ; 
     763(  761):    push ~tmp25 ; 
     766(  764):    push ~tmp27 ; 
     769(  767):    call cons ; 
     772(  770):    let ~tmp28 ; 
     775(  773):    pop ~tmp28 ; 
     778(  776):    ret ~tmp28 ; 
     781(  779):    } else { 
     784(   94):    push list ; 
     787(  785):    call rest ; 
     790(  788):    let ~tmp29 ; 
     793(  791):    pop ~tmp29 ; 
     796(  794):    push fn ; 
     799(  797):    push ~tmp29 ; 
     802(  800):    call filter ; 
     805(  803):    let ~tmp30 ; 
     808(  806):    pop ~tmp30 ; 
     811(  809):    ret ~tmp30 ; 
     814(  812):    } ; 
     816(  814):  } ; 
     818(  816):push 10 ; 
     821(  819):call build_list ; 
     824(  822):let ~tmp31 ; 
     827(  825):pop ~tmp31 ; 
     830(  828):let mylist = ~tmp31 ; 
     835(  833):push mylist ; 
     838(  836):call print_list ; 
     841(  839):let ~tmp32 ; 
     844(  842):pop ~tmp32 ; 
     847(  845):~tmp32 ; 
     849(  847):let insert => { 
     853(  553):  let lst ; 
     856(  854):  pop lst ; 
     859(  857):  let element ; 
     862(  860):  pop element ; 
     865(  863):  push lst ; 
     868(  866):  call first ; 
     871(  869):  let ~tmp33 ; 
     874(  872):  pop ~tmp33 ; 
     877(  875):  if ( lst == <none> ) { 
     884(  103):    push element ; 
     887(  885):    push <none> ; 
     890(  888):    call cons ; 
     893(  891):    let ~tmp34 ; 
     896(  894):    pop ~tmp34 ; 
     899(  897):    ret ~tmp34 ; 
     902(  900):    } else if ( element <= ~tmp33 ) { 
     910(  106):    push element ; 
     913(  911):    push lst ; 
     916(  914):    call cons ; 
     919(  917):    let ~tmp35 ; 
     922(  920):    pop ~tmp35 ; 
     925(  923):    ret ~tmp35 ; 
     928(  926):    } else { 
     931(  109):    push lst ; 
     934(  932):    call first ; 
     937(  935):    let ~tmp36 ; 
     940(  938):    pop ~tmp36 ; 
     943(  941):    push lst ; 
     946(  944):    call rest ; 
     949(  947):    let ~tmp37 ; 
     952(  950):    pop ~tmp37 ; 
     955(  953):    push element ; 
     958(  956):    push ~tmp37 ; 
     961(  959):    call insert ; 
     964(  962):    let ~tmp38 ; 
     967(  965):    pop ~tmp38 ; 
     970(  968):    push ~tmp36 ; 
     973(  971):    push ~tmp38 ; 
     976(  974):    call cons ; 
     979(  977):    let ~tmp39 ; 
     982(  980):    pop ~tmp39 ; 
     985(  983):    ret ~tmp39 ; 
     988(  986):    } ; 
     990(  988):  } ; 
     992(  990):let sort => { 
     996(  629):  let lst ; 
     999(  997):  pop lst ; 
    1002( 1000):  if ( lst == <none> ) { 
    1009(  116):    ret <none> ; 
    1012( 1010):    } else { 
    1015(  119):    push lst ; 
    1018( 1016):    call first ; 
    1021( 1019):    let ~tmp40 ; 
    1024( 1022):    pop ~tmp40 ; 
    1027( 1025):    push lst ; 
    1030( 1028):    call rest ; 
    1033( 1031):    let ~tmp41 ; 
    1036( 1034):    pop ~tmp41 ; 
    1039( 1037):    push ~tmp41 ; 
    1042( 1040):    call sort ; 
    1045( 1043):    let ~tmp42 ; 
    1048( 1046):    pop ~tmp42 ; 
    1051( 1049):    push ~tmp40 ; 
    1054( 1052):    push ~tmp42 ; 
    1057( 1055):    call insert ; 
    1060( 1058):    let ~tmp43 ; 
    1063( 1061):    pop ~tmp43 ; 
    1066( 1064):    ret ~tmp43 ; 
    1069( 1067):    } ; 
    1071( 1069):  } ; 
    1073( 1071):push 17 ; 
    1076( 1074):push <none> ; 
    1079( 1077):call cons ; 
    1082( 1080):let ~tmp44 ; 
    1085( 1083):pop ~tmp44 ; 
    1088( 1086):push 36 ; 
    1091( 1089):push ~tmp44 ; 
    1094( 1092):call cons ; 
    1097( 1095):let ~tmp45 ; 
    1100( 1098):pop ~tmp45 ; 
    1103( 1101):push 9 ; 
    1106( 1104):push ~tmp45 ; 
    1109( 1107):call cons ; 
    1112( 1110):let ~tmp46 ; 
    1115( 1113):pop ~tmp46 ; 
    1118( 1116):push 2 ; 
    1121( 1119):push ~tmp46 ; 
    1124( 1122):call cons ; 
    1127( 1125):let ~tmp47 ; 
    1130( 1128):pop ~tmp47 ; 
    1133( 1131):push 84 ; 
    1136( 1134):push ~tmp47 ; 
    1139( 1137):call cons ; 
    1142( 1140):let ~tmp48 ; 
    1145( 1143):pop ~tmp48 ; 
    1148( 1146):let sortinglist = ~tmp48 ; 
    1153( 1151):push sortinglist ; 
    1156( 1154):call sort ; 
    1159( 1157):let ~tmp49 ; 
    1162( 1160):pop ~tmp49 ; 
    1165( 1163):let sorted = ~tmp49 ; 
    1170( 1168):push sorted ; 
    1173( 1171):call print_list ; 
    1176( 1174):let ~tmp50 ; 
    1179( 1177):pop ~tmp50 ; 
    1182( 1180):~tmp50 ; 
    1184( 1182):